name: Sync Dev Branches on PR Merge

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-dev-branches:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Sync dev branches
        run: |
          # No global set -e, we handle errors manually
          set +e
          
          git fetch origin
          
          DEV_BRANCHES=$(git branch -r | grep 'origin/dev/' | grep -v HEAD | sed 's/origin\///' | xargs)
          
          if [ -z "$DEV_BRANCHES" ]; then
            echo "No dev/* branches to synchronize"
            exit 0
          fi
          
          echo "Branches to synchronize: $DEV_BRANCHES"
          
          SYNC_SUCCESS=0
          SYNC_SKIPPED=0
          SYNC_FAILED=0
          
          for branch in $DEV_BRANCHES; do
            echo ""
            echo "Checking $branch..."
            
            # Checkout branch
            if git checkout $branch; then
              echo "Checkout $branch successful"
            else
              echo "Unable to checkout $branch"
              ((SYNC_FAILED++))
              continue
            fi
            
            # Fetch specific branch
            git fetch origin $branch
            
            # Check if branch is already up to date
            BEHIND_COUNT=$(git rev-list --count HEAD..origin/main 2>/dev/null || echo "0")
            
            if [ "$BEHIND_COUNT" -eq 0 ]; then
              echo "$branch already up to date (no commits to synchronize)"
              ((SYNC_SKIPPED++))
              continue
            fi
            
            echo "$branch is $BEHIND_COUNT commits behind, synchronizing..."
            
            # Merge attempt
            if git merge origin/main --no-edit; then
              echo "Merge successful for $branch"
              
              # Push
              if git push origin $branch; then
                echo "$branch synchronized and pushed"
                ((SYNC_SUCCESS++))
              else
                echo "Push failed for $branch"
                ((SYNC_FAILED++))
              fi
            else
              echo "Conflicts detected on $branch - aborting merge"
              git merge --abort 2>/dev/null || true
              ((SYNC_FAILED++))
            fi
          done
          
          # Return to main
          echo ""
          echo "Returning to main branch..."
          git checkout main
          
          echo ""
          echo "Final summary:"
          echo "    Synchronized: $SYNC_SUCCESS"
          echo "    Already up to date: $SYNC_SKIPPED" 
          echo "    Failures: $SYNC_FAILED"
          
          # Action succeeds if at least one branch was processed successfully
          TOTAL_SUCCESS=$((SYNC_SUCCESS + SYNC_SKIPPED))
          
          if [ $TOTAL_SUCCESS -gt 0 ]; then
            echo "Global synchronization successful"
            exit 0
          elif [ $SYNC_FAILED -gt 0 ]; then
            echo "All synchronizations failed"
            exit 1
          else
            echo "No branches processed"
            exit 0
          fi
